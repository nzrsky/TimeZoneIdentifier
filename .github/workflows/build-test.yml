name: Build & Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-ubuntu:
    name: Build & Test on ${{ matrix.os }} with Swift ${{ matrix.swift }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-22.04, ubuntu-23.04, ubuntu-24.04]
        swift: ["5.8", "5.9", "6.0"]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Swift ${{ matrix.swift }}
        uses: SwiftyLab/setup-swift@latest
        with:
          swift-version: ${{ matrix.swift }}

      - name: Get swift version
        run: swift --version

      - name: Cache Swift Packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.swiftpm
            .build
          key: ${{ runner.os }}-swift-${{ matrix.swift }}-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-swift-${{ matrix.swift }}-
            ${{ runner.os }}-swift-
            ${{ runner.os }}-
        
      - name: Gen Linux tests
        run: sh ./scripts/gen_linux_tests

      - name: Resolve Swift Dependencies
        run: swift package resolve

      - name: Build
        run: swift build -c release

      - name: Run Tests
        run: swift test --enable-code-coverage

      - name: Generate Code Coverage
        if: ${{ matrix.os == 'ubuntu-24.04' && matrix.swift == '5.9' }}
        run: |
          mkdir -p coverage
          xcrun llvm-cov export \
            .build/debug/TimeZoneIdentifierPackageTests.xctest/Contents/MacOS/TimeZoneIdentifierPackageTests \
            -instr-profile .build/debug/codecov/default.profdata \
            --format="lcov" \
            --ignore-filename-regex "\\.build" \
            --ignore-filename-regex "Tests" > ./coverage/coverage.lcov

      - name: Upload Code Coverage to Codecov
        if: ${{ matrix.os == 'ubuntu-24.04' && matrix.swift == '5.9' }}
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage.lcov
          name: codecov-ubuntu-${{ matrix.os }}-swift-${{ matrix.swift }}
          flags: unittests
          fail_ci_if_error: true


  build-test-macos:
    name: Build & Test on ${{ matrix.os }} with Swift ${{ matrix.swift }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: true
      matrix:
        os: [macos-13, macos-14, macos-15]
        swift: ["5.8", "5.9", "6.0"]
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Swift ${{ matrix.swift }}
        uses: SwiftyLab/setup-swift@latest
        with:
          swift-version: ${{ matrix.swift }}

      - name: Get Swift Version
        run: swift --version

      - name: Cache Swift Packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.swiftpm
            .build
          key: ${{ runner.os }}-swift-${{ matrix.swift }}-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-swift-${{ matrix.swift }}-
            ${{ runner.os }}-swift-
            ${{ runner.os }}-

      - name: Resolve Swift Dependencies
        run: swift package resolve

      - name: Build
        run: swift build -c release

      - name: Select Xcode
        run: |
          sudo xcode-select -switch /Applications/Xcode.app
          xcodebuild -version

      - name: List Available Simulators
        run: xcrun simctl list devices available

      - name: Run Tests on iOS Simulators
        env:
          IOS_VERSIONS: "17.0.2,16.7.1,15.7.4,14.8.1,13.7,12.5.6,12.0"
        run: |
          IFS=',' read -ra IOS_VERS <<< "$IOS_VERSIONS"
          for ios in "${IOS_VERS[@]}"; do
            echo "Running tests on iOS Simulator OS $ios"
            xcrun simctl boot "iPhone 14" || echo "Simulator already booted"
            xcodebuild test -scheme TimeZoneIdentifier -destination "platform=iOS Simulator,name=iPhone 14,OS=$ios" || echo "Tests failed for iOS $ios"
          done

      - name: Run Tests on tvOS Simulators
        env:
          TVOS_VERSIONS: "17.0.1,16.4.4,15.6,14.7,13.4.8,12.4.1,12.0"
        run: |
          IFS=',' read -ra TVOS_VERS <<< "$TVOS_VERSIONS"
          for tvos in "${TVOS_VERS[@]}"; do
            echo "Running tests on tvOS Simulator OS $tvos"
            xcrun simctl boot "Apple TV 4K" || echo "Simulator already booted"
            xcodebuild test -scheme TimeZoneIdentifier -destination "platform=tvOS Simulator,name=Apple TV 4K,OS=$tvos" || echo "Tests failed for tvOS $tvos"
          done

      - name: Run Tests on watchOS Simulators
        env:
          WATCHOS_VERSIONS: "10.0.1,9.6,8.7,7.6.2,6.3,5.3.9,5.0"
        run: |
          IFS=',' read -ra WATCHOS_VERS <<< "$WATCHOS_VERSIONS"
          for watchos in "${WATCHOS_VERS[@]}"; do
            echo "Running tests on watchOS Simulator OS $watchos"
            xcrun simctl boot "Apple Watch Series 8" || echo "Simulator already booted"
            xcodebuild test -scheme TimeZoneIdentifier -destination "platform=watchOS Simulator,name=Apple Watch Series 8,OS=$watchos" || echo "Tests failed for watchOS $watchos"
          done

      - name: Run Tests on iPadOS Simulators
        env:
          IPADOS_VERSIONS: "17.0.2,16.7.1,15.7.4,14.8.1,13.7,12.5.5,12.0"
        run: |
          IFS=',' read -ra IPADOS_VERS <<< "$IPADOS_VERSIONS"
          for ipados in "${IPADOS_VERS[@]}"; do
            echo "Running tests on iPadOS Simulator OS $ipados"
            xcrun simctl boot "iPad Pro (12.9-inch)" || echo "Simulator already booted"
            xcodebuild test -scheme TimeZoneIdentifier -destination "platform=iOS Simulator,name=iPad Pro (12.9-inch),OS=$ipados" || echo "Tests failed for iPadOS $ipados"
          done

      - name: Run Tests on VisionOS Simulators
        env:
          VISIONOS_VERSIONS: "1.0.1,1.0"
        run: |
          IFS=',' read -ra VISIONOS_VERS <<< "$VISIONOS_VERSIONS"
          for visionos in "${VISIONOS_VERS[@]}"; do
            echo "Running tests on VisionOS Simulator OS $visionos"
            xcrun simctl boot "Vision Pro" || echo "Simulator already booted"
            xcodebuild test -scheme TimeZoneIdentifier -destination "platform=visionOS Simulator,name=Vision Pro,OS=$visionos" || echo "Tests failed for VisionOS $visionos"
          done

      - name: Run macOS Tests
        run: swift test --enable-code-coverage

      - name: Generate Code Coverage
        if: ${{ matrix.os == 'macos-14' && matrix.swift == '5.9' }}
        run: |
          mkdir -p coverage
          xcrun llvm-cov export \
            .build/debug/TimeZoneIdentifierPackageTests.xctest/Contents/MacOS/TimeZoneIdentifierPackageTests \
            -instr-profile .build/debug/codecov/default.profdata \
            --format="lcov" \
            --ignore-filename-regex "\\.build" \
            --ignore-filename-regex "Tests" > ./coverage/coverage.lcov

      - name: Upload Code Coverage to Codecov
        if: ${{ matrix.os == 'macos-14' && matrix.swift == '5.9' }}
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage.lcov
          name: codecov-macos-${{ matrix.os }}-swift-${{ matrix.swift }}
          flags: unittests
          fail_ci_if_error: true


  podspec-validation:
    name: Validate Podspec
    runs-on: macos-latest
    needs: build-test-macos
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Ruby Version from .ruby-version
        id: get_ruby_version
        run: |
          if [ -f .ruby-version ]; then
            echo "RUBY_VERSION=$(cat .ruby-version)" >> $GITHUB_ENV
          else
            echo "RUBY_VERSION=3.1.0" >> $GITHUB_ENV
            echo ".ruby-version file not found. Using default Ruby version 3.1.0."
          fi

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Validate Podspec
        run: pod lib lint TimeZoneIdentifier.podspec --verbose --allow-warnings
